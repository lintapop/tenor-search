var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { Query } from './Query';
var TrackingQuery = /** @class */ (function (_super) {
    __extends(TrackingQuery, _super);
    function TrackingQuery(game) {
        var _a;
        var _this = _super.call(this, game) || this;
        _this.trackedEntities = [];
        _this.addedThisFrame = [];
        _this.removedThisFrame = [];
        _this.changesThisFrame = 0;
        /**
         * Add an async function which is called with an Entity as it
         * is added to the query, and returns a cleanup callback to call when
         * the Entity is removed.
         */
        _this.process = function (processor) { };
        _this.addToList = function (entityId) {
            _this.trackedEntities.push(entityId);
            var removedIndex = _this.removedThisFrame.indexOf(entityId);
            if (removedIndex !== -1) {
                // this was a transfer (removes happen first)
                _this.removedThisFrame.splice(removedIndex, 1);
                _this.changesThisFrame--;
            }
            else {
                // only non-transfers count as adds
                _this.addedThisFrame.push(entityId);
                _this.changesThisFrame++;
            }
        };
        _this.removeFromList = function (entityId) {
            var index = _this.trackedEntities.indexOf(entityId);
            if (index === -1)
                return;
            _this.trackedEntities.splice(index, 1);
            _this.removedThisFrame.push(entityId);
            _this.changesThisFrame++;
        };
        _this.resetStepTracking = function () {
            _this.addedThisFrame.length = 0;
            _this.removedThisFrame.length = 0;
            _this.changesThisFrame = 0;
        };
        _this.processAddRemove = function () {
            if (_this.changesThisFrame) {
                _this.emit('change');
                // TODO: iterate add list, get EntityImpostors, run process
            }
        };
        _this.addedIterable = (_a = {},
            _a[Symbol.iterator] = function () { return new AddedIterator(game, _this); },
            _a);
        _this.on('entityAdded', _this.addToList);
        _this.on('entityRemoved', _this.removeFromList);
        // when do we reset the frame-specific tracking?
        // right before we populate new values from this frame's operations.
        game.on('preApplyOperations', _this.resetStepTracking);
        // after we apply operations and register all changes for the frame,
        // we do processing of final add/remove list
        game.on('stepComplete', _this.processAddRemove);
        return _this;
    }
    Object.defineProperty(TrackingQuery.prototype, "entities", {
        get: function () {
            return this.trackedEntities;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TrackingQuery.prototype, "addedIds", {
        get: function () {
            return this.addedThisFrame;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TrackingQuery.prototype, "added", {
        get: function () {
            return this.addedIterable;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TrackingQuery.prototype, "removedIds", {
        get: function () {
            return this.removedThisFrame;
        },
        enumerable: false,
        configurable: true
    });
    TrackingQuery.prototype.initialize = function (def) {
        var e_1, _a;
        _super.prototype.initialize.call(this, def);
        // reset all tracking arrays
        this.trackedEntities.length = 0;
        this.addedThisFrame.length = 0;
        this.removedThisFrame.length = 0;
        this.changesThisFrame = 0;
        try {
            // bootstrap entities list -
            // TODO: optimize?
            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
                var ent = _c.value;
                this.trackedEntities.push(ent.id);
                this.addedThisFrame.push(ent.id);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (this.trackedEntities.length) {
            this.emit('change');
        }
    };
    return TrackingQuery;
}(Query));
export { TrackingQuery };
var AddedIterator = /** @class */ (function () {
    function AddedIterator(game, query) {
        this.game = game;
        this.query = query;
        this.index = 0;
        this.result = {
            done: true,
            value: null,
        };
    }
    AddedIterator.prototype.next = function () {
        if (this.index >= this.query.addedIds.length) {
            this.result.done = true;
            return this.result;
        }
        this.result.done = false;
        this.result.value = this.game.get(this.query.addedIds[this.index]);
        return this.result;
    };
    return AddedIterator;
}());
//# sourceMappingURL=TrackingQuery.js.map