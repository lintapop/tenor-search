"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceManager = void 0;
var objectPool_1 = require("../internal/objectPool");
var ResourceHandle = /** @class */ (function () {
    function ResourceHandle() {
        var _this = this;
        this._resolve = function () {
            throw new Error('Cannot resolve this resource yet');
        };
        this._value = null;
        this.__alive = false;
        this.resolve = function (value) {
            _this._resolve(value);
            _this._value = value;
        };
        this.reset = function () {
            _this._resolve = function () {
                throw new Error('Cannot resolve this resource yet');
            };
            _this._promise = new Promise(function (resolve) {
                _this._resolve = resolve;
            });
            _this._value = null;
        };
        this._promise = new Promise(function (resolve) {
            _this._resolve = resolve;
        });
    }
    Object.defineProperty(ResourceHandle.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ResourceHandle.prototype, "promise", {
        get: function () {
            return this.promise;
        },
        enumerable: false,
        configurable: true
    });
    return ResourceHandle;
}());
var ResourceManager = /** @class */ (function () {
    function ResourceManager() {
        var _this = this;
        this.handlePool = new objectPool_1.ObjectPool(function () { return new ResourceHandle(); });
        this.handles = new Map();
        this.getOrCreateGlobalHandle = function (key) {
            var handle = _this.handles.get(key);
            if (!handle) {
                handle = _this.handlePool.acquire();
                _this.handles.set(key, handle);
            }
            return handle;
        };
        this.load = function (key) {
            return _this.getOrCreateGlobalHandle(key).promise;
        };
        this.resolve = function (key, value) {
            _this.getOrCreateGlobalHandle(key).resolve(value);
        };
        this.immediate = function (key) {
            return _this.getOrCreateGlobalHandle(key).value;
        };
        this.remove = function (key) {
            var value = _this.handles.get(key);
            if (value) {
                _this.handlePool.release(value);
                _this.handles.delete(key);
            }
        };
    }
    return ResourceManager;
}());
exports.ResourceManager = ResourceManager;
//# sourceMappingURL=ResourceManager.js.map