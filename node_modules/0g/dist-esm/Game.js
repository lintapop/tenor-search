var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { EventEmitter } from 'events';
import * as input from './input';
import { QueryManager } from './QueryManager';
import { ComponentManager } from './ComponentManager';
import { IdManager } from './IdManager';
import { ArchetypeManager } from './ArchetypeManager';
import { Entity } from './Entity';
import { ResourceManager } from './resources/ResourceManager';
import { ObjectPool } from './internal/objectPool';
var Game = /** @class */ (function (_super) {
    __extends(Game, _super);
    function Game(_a) {
        var components = _a.components, _b = _a.systems, systems = _b === void 0 ? [] : _b, _c = _a.globals, globals = _c === void 0 ? new Map() : _c;
        var _this = _super.call(this) || this;
        _this._idManager = new IdManager();
        _this._operationQueue = [];
        _this._resourceManager = new ResourceManager();
        _this._entityPool = new ObjectPool(function () { return new Entity(); });
        // TODO: configurable?
        _this._phases = ['preStep', 'step', 'postStep'];
        _this._delta = 0;
        _this._time = 0;
        _this._constants = {
            maxComponentId: 256,
            maxEntities: Math.pow(2, 16),
        };
        _this.create = function () {
            var id = _this.idManager.get();
            _this._operationQueue.push({
                op: 'createEntity',
                entityId: id,
            });
            return id;
        };
        _this.destroy = function (id) {
            _this._operationQueue.push({
                op: 'destroyEntity',
                entityId: id,
            });
        };
        _this.add = function (entityId, Type, initial) {
            _this._operationQueue.push({
                op: 'addComponent',
                entityId: entityId,
                componentId: Type.id,
                initialValues: initial,
            });
        };
        _this.remove = function (entityId, Type) {
            _this._operationQueue.push({
                op: 'removeComponent',
                entityId: entityId,
                componentId: Type.id,
            });
        };
        _this.get = function (entityId) {
            return _this.archetypeManager.getEntity(entityId);
        };
        /**
         * Manually step the game simulation forward. Provide a
         * delta (in ms) of time elapsed since last frame.
         */
        _this.step = function (delta) {
            _this._delta = delta;
            _this._phases.forEach(function (phase) {
                _this.emit(phase);
            });
            _this.emit('preApplyOperations');
            _this.flushOperations();
            _this.emit('stepComplete');
        };
        _this.flushOperations = function () {
            while (_this._operationQueue.length) {
                _this.applyOperation(_this._operationQueue.shift());
            }
        };
        _this.applyOperation = function (operation) {
            var instance;
            switch (operation.op) {
                case 'addComponent':
                    instance = _this.componentManager.acquire(operation.componentId, operation.initialValues);
                    _this.archetypeManager.addComponent(operation.entityId, instance);
                    break;
                case 'removeComponent':
                    instance = _this.archetypeManager.removeComponent(operation.entityId, operation.componentId);
                    _this.componentManager.release(instance);
                    break;
                case 'createEntity':
                    _this.archetypeManager.createEntity(operation.entityId);
                    break;
                case 'destroyEntity':
                    var entity = _this.archetypeManager.destroyEntity(operation.entityId);
                    entity.components.forEach(_this.componentManager.release);
                    _this.entityPool.release(entity);
                    break;
            }
        };
        _this.input = input;
        _this.setMaxListeners(Infinity);
        _this._componentManager = new ComponentManager(components, _this);
        _this._queryManager = new QueryManager(_this);
        _this._archetypeManager = new ArchetypeManager(_this);
        _this._runnableCleanups = systems.map(function (sys) { return sys(_this); });
        _this.globals = globals;
        return _this;
    }
    Object.defineProperty(Game.prototype, "idManager", {
        get: function () {
            return this._idManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "componentManager", {
        get: function () {
            return this._componentManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "archetypeManager", {
        get: function () {
            return this._archetypeManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "delta", {
        get: function () {
            return this._delta;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "time", {
        get: function () {
            return this._time;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "queryManager", {
        get: function () {
            return this._queryManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "constants", {
        get: function () {
            return this._constants;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "resourceManager", {
        get: function () {
            return this._resourceManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "entityPool", {
        get: function () {
            return this._entityPool;
        },
        enumerable: false,
        configurable: true
    });
    return Game;
}(EventEmitter));
export { Game };
//# sourceMappingURL=Game.js.map