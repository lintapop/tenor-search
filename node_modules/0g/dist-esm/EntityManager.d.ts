/// <reference types="node" />
import { EventEmitter } from 'events';
import { Entity } from './Entity';
import { Game } from './Game';
export declare interface EntityManager {
    on(ev: 'entityAdded', callback: (entity: Entity) => void): this;
    on(ev: 'entityRemoved', callback: (entity: Entity) => void): this;
    on(ev: 'entityComponentAdded', callback: (entity: Entity) => void): this;
    on(ev: 'entityComponentRemoved', callback: (entity: Entity) => void): this;
    off(ev: 'entityAdded', callback: (entity: Entity) => void): this;
    off(ev: 'entityRemoved', callback: (entity: Entity) => void): this;
    off(ev: 'entityComponentAdded', callback: (entity: Entity) => void): this;
    off(ev: 'entityComponentRemoved', callback: (entity: Entity) => void): this;
}
export declare class EntityManager extends EventEmitter {
    private __game;
    private pool;
    private _destroyList;
    private entityMap;
    constructor(__game: Game);
    get ids(): IterableIterator<number>;
    get entityList(): IterableIterator<Entity>;
    has(id: number): boolean;
    create(ownId?: number | null): Entity;
    get(id: number): Entity | null;
    destroy(id: number): void;
    executeDestroys: () => void;
    private executeDestroy;
    serialize(): null[];
    private serializeEntity;
}
