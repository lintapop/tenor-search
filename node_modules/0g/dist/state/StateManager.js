"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StateManager = void 0;
var objectPool_1 = require("../internal/objectPool");
var StateHandle = /** @class */ (function () {
    function StateHandle() {
        var _this = this;
        this._resolve = function () {
            throw new Error('Cannot resolve this state yet');
        };
        this._value = null;
        this.__alive = false;
        this.resolve = function (value) {
            _this._resolve(value);
            _this._value = value;
        };
        this.reset = function () {
            _this._resolve = function () {
                throw new Error('Cannot resolve this state yet');
            };
            _this._promise = new Promise(function (resolve) {
                _this._resolve = resolve;
            });
            _this._value = null;
        };
        this._promise = new Promise(function (resolve) {
            _this._resolve = resolve;
        });
    }
    Object.defineProperty(StateHandle.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StateHandle.prototype, "promise", {
        get: function () {
            return this.promise;
        },
        enumerable: false,
        configurable: true
    });
    return StateHandle;
}());
var StateManager = /** @class */ (function () {
    function StateManager() {
        var _this = this;
        this.handlePool = new objectPool_1.ObjectPool(function () { return new StateHandle(); });
        this.groups = [];
        this.globals = new Map();
        this.getOrCreateHandle = function (group, key) {
            var _a, _b;
            var handle;
            if (!_this.groups[group]) {
                _this.groups[group] = new Map();
                handle = _this.handlePool.acquire();
                _this.groups[group].set(key, handle);
                return handle;
            }
            handle = (_a = _this.groups[group]) === null || _a === void 0 ? void 0 : _a.get(key);
            if (!handle) {
                handle = _this.handlePool.acquire();
                (_b = _this.groups[group]) === null || _b === void 0 ? void 0 : _b.set(key, handle);
            }
            return handle;
        };
        this.getOrCreateGlobalHandle = function (key) {
            var handle = _this.globals.get(key);
            if (!handle) {
                handle = _this.handlePool.acquire();
                _this.globals.set(key, handle);
            }
            return handle;
        };
        this.load = function (entityId, key) {
            return _this.getOrCreateHandle(entityId, key).promise;
        };
        this.resolve = function (entityId, key, value) {
            _this.getOrCreateHandle(entityId, key).resolve(value);
        };
        this.immediate = function (entityId, key) {
            return _this.getOrCreateHandle(entityId, key).value;
        };
        this.remove = function (entityId, key) {
            if (!_this.groups[entityId])
                return;
            var handle = _this.groups[entityId].get(key);
            if (!handle)
                return;
            _this.handlePool.release(handle);
            _this.groups[entityId].delete(key);
        };
        this.removeAll = function (entityId) {
            if (!_this.groups[entityId])
                return;
            _this.groups[entityId].forEach(function (value) {
                _this.handlePool.release(value);
            });
            _this.groups[entityId].clear();
            delete _this.groups[entityId]; // necessary?
        };
        this.loadGlobal = function (key) {
            return _this.getOrCreateGlobalHandle(key).promise;
        };
        this.resolveGlobal = function (key, value) {
            _this.getOrCreateGlobalHandle(key).resolve(value);
        };
        this.immediateGlobal = function (key) {
            return _this.getOrCreateGlobalHandle(key).value;
        };
        this.removeGlobal = function (key) {
            var value = _this.globals.get(key);
            if (value) {
                _this.handlePool.release(value);
                _this.globals.delete(key);
            }
        };
    }
    return StateManager;
}());
exports.StateManager = StateManager;
//# sourceMappingURL=StateManager.js.map