var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { EventEmitter } from 'events';
import { Entity } from './Entity';
import { ObjectPool } from './internal/objectPool';
import { logger } from './logger';
import SparseMap from 'mnemonist/sparse-map';
var EntityManager = /** @class */ (function (_super) {
    __extends(EntityManager, _super);
    function EntityManager(__game) {
        var _this = _super.call(this) || this;
        _this.__game = __game;
        _this.pool = new ObjectPool(function () { return new Entity(_this.__game); });
        _this._destroyList = new Array();
        _this.entityMap = new SparseMap(_this.__game.constants.maxEntities);
        _this.executeDestroys = function () {
            _this._destroyList.forEach(_this.executeDestroy);
            _this._destroyList.length = 0;
        };
        _this.executeDestroy = function (id) {
            var entity = _this.entityMap.get(id);
            if (!entity || entity.id !== id) {
                throw new Error("Attempted to destroy entity " + id + " which was not valid");
            }
            _this.entityMap.delete(id);
            _this.pool.release(entity);
            _this.__game.idManager.release(id);
            _this.emit('entityRemoved', entity);
            logger.debug("Destroyed " + id);
        };
        _this.__game.on('postStep', _this.executeDestroys);
        return _this;
    }
    Object.defineProperty(EntityManager.prototype, "ids", {
        get: function () {
            return this.entityMap.keys();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EntityManager.prototype, "entityList", {
        get: function () {
            return this.entityMap.values();
        },
        enumerable: false,
        configurable: true
    });
    EntityManager.prototype.has = function (id) {
        return this.entityMap.has(id);
    };
    EntityManager.prototype.create = function (ownId) {
        if (ownId === void 0) { ownId = null; }
        var id = ownId || this.__game.idManager.get();
        var ent = this.pool.acquire();
        ent.id = id;
        this.entityMap.set(id, ent);
        this.emit('entityAdded', ent);
        logger.debug("Added " + id);
        return ent;
    };
    EntityManager.prototype.get = function (id) {
        var ent = this.entityMap.get(id);
        return ent !== null && ent !== void 0 ? ent : null;
    };
    EntityManager.prototype.destroy = function (id) {
        this._destroyList.push(id);
        logger.debug("Queueing " + id + " for destroy");
    };
    EntityManager.prototype.serialize = function () {
        var e_1, _a;
        var serialized = [];
        try {
            for (var _b = __values(this.entityList), _c = _b.next(); !_c.done; _c = _b.next()) {
                var ent = _c.value;
                serialized.push(this.serializeEntity(ent));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return serialized;
    };
    EntityManager.prototype.serializeEntity = function (entity) {
        return null; // TODO
    };
    return EntityManager;
}(EventEmitter));
export { EntityManager };
//# sourceMappingURL=EntityManager.js.map