var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component } from '../Component';
import { makeEffect } from '../Effect';
import { changed, not } from '../filters';
import { Game } from '../Game';
import { logger } from '../logger';
import { makeSystem } from '../System';
var delta = 16 + 2 / 3;
describe('integration tests', function () {
    var OutputComponent = /** @class */ (function (_super) {
        __extends(OutputComponent, _super);
        function OutputComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return OutputComponent;
    }(Component(function () { return ({
        removablePresent: false,
    }); })));
    var RemovableComponent = /** @class */ (function (_super) {
        __extends(RemovableComponent, _super);
        function RemovableComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return RemovableComponent;
    }(Component(function () { return ({
        stepsSinceAdded: 0,
    }); })));
    var stepsTillToggle = 3;
    var SetFlagEffect = makeEffect([RemovableComponent, OutputComponent], function (ent) {
        logger.debug('Setting removablePresent: true');
        ent.get(OutputComponent).update(function (output) {
            output.removablePresent = true;
        });
        return function () {
            logger.debug('Setting removablePresent: false');
            ent.get(OutputComponent).update(function (output) {
                output.removablePresent = false;
            });
        };
    });
    var ReAddRemovableEffect = makeEffect([not(RemovableComponent)], function (ent, game) {
        logger.debug('Adding RemovableComponent');
        game.add(ent.id, RemovableComponent);
    });
    var IncrementRemoveTimerSystem = makeSystem([RemovableComponent], function (ent) {
        logger.debug('Incrementing stepsSinceAdded');
        ent.get(RemovableComponent).update(function (comp) {
            comp.stepsSinceAdded++;
            logger.debug("stepsSinceAdded: " + comp.stepsSinceAdded);
        });
    });
    var RemoveSystem = makeSystem([changed(RemovableComponent)], function (ent, game) {
        if (ent.get(RemovableComponent).stepsSinceAdded >= stepsTillToggle) {
            logger.debug('Removing RemovableComponent');
            game.remove(ent.id, RemovableComponent);
        }
    });
    it('adds and removes components, and queries for those operations', function () {
        var game = new Game({
            components: [OutputComponent, RemovableComponent],
            systems: [
                SetFlagEffect,
                ReAddRemovableEffect,
                IncrementRemoveTimerSystem,
                RemoveSystem,
            ],
        });
        var a = game.create();
        game.add(a, OutputComponent);
        logger.debug('Step 1');
        game.step(delta);
        var entity = game.get(a);
        expect(entity.maybeGet(OutputComponent)).not.toBe(null);
        expect(entity.get(OutputComponent).removablePresent).toBe(false);
        logger.debug('Step 2');
        game.step(delta);
        entity = game.get(a);
        expect(entity.get(OutputComponent).removablePresent).toBe(true);
        expect(entity.maybeGet(RemovableComponent)).not.toBe(null);
        expect(entity.maybeGet(RemovableComponent).stepsSinceAdded).toBe(0);
        logger.debug('Step 3');
        game.step(delta);
        entity = game.get(a);
        expect(entity.get(OutputComponent).removablePresent).toBe(true);
        expect(entity.maybeGet(RemovableComponent)).not.toBe(null);
        expect(entity.maybeGet(RemovableComponent).stepsSinceAdded).toBe(1);
        logger.debug('Step 4');
        game.step(delta);
        entity = game.get(a);
        expect(entity.get(OutputComponent).removablePresent).toBe(true);
        expect(entity.maybeGet(RemovableComponent)).not.toBe(null);
        expect(entity.maybeGet(RemovableComponent).stepsSinceAdded).toBe(2);
        logger.debug('Step 5');
        game.step(delta);
        entity = game.get(a);
        expect(entity.get(OutputComponent).removablePresent).toBe(false);
        expect(entity.maybeGet(RemovableComponent)).toBe(null);
        logger.debug('Step 6');
        game.step(delta);
        entity = game.get(a);
        expect(entity.get(OutputComponent).removablePresent).toBe(true);
        expect(entity.maybeGet(RemovableComponent)).not.toBe(null);
        expect(entity.maybeGet(RemovableComponent).stepsSinceAdded).toBe(0);
    });
});
//# sourceMappingURL=integration.test.js.map