/// <reference types="node" />
import { EventEmitter } from 'events';
import * as input from './input';
import { QueryManager } from './QueryManager';
import { ComponentType } from './Component';
import { ComponentManager } from './ComponentManager';
import { IdManager } from './IdManager';
import { ArchetypeManager } from './ArchetypeManager';
import { Entity } from './Entity';
import { ResourceManager } from './resources/ResourceManager';
import { ObjectPool } from './internal/objectPool';
export declare type GameConstants = {
    maxComponentId: number;
    maxEntities: number;
};
export interface GameEvents {
    preStep(): any;
    step(): any;
    postStep(): any;
    stepComplete(): any;
    preApplyOperations(): any;
}
export declare interface Game {
    on<U extends keyof GameEvents>(event: U, callback: GameEvents[U]): this;
    off<U extends keyof GameEvents>(event: U, callback: GameEvents[U]): this;
    emit<U extends keyof GameEvents>(event: U, ...args: Parameters<GameEvents[U]>): boolean;
}
export declare class Game extends EventEmitter {
    private _queryManager;
    private _idManager;
    private _archetypeManager;
    private _operationQueue;
    private _componentManager;
    private _resourceManager;
    private _runnableCleanups;
    private _entityPool;
    private _phases;
    private _delta;
    private _time;
    globals: Map<string, any>;
    private _constants;
    constructor({ components, systems, globals, }: {
        components: ComponentType<any>[];
        systems?: ((game: Game) => () => void)[];
        globals?: Map<string, any>;
    });
    get idManager(): IdManager;
    get componentManager(): ComponentManager;
    get archetypeManager(): ArchetypeManager;
    get delta(): number;
    get time(): number;
    get queryManager(): QueryManager;
    get constants(): GameConstants;
    get resourceManager(): ResourceManager;
    get entityPool(): ObjectPool<Entity<ComponentType<any>, any>>;
    create: () => number;
    destroy: (id: number) => void;
    add: <ComponentShape>(entityId: number, Type: ComponentType<ComponentShape>, initial?: Partial<ComponentShape> | undefined) => void;
    remove: <T extends ComponentType<any>>(entityId: number, Type: T) => void;
    get: (entityId: number) => Entity<any> | null;
    /**
     * Manually step the game simulation forward. Provide a
     * delta (in ms) of time elapsed since last frame.
     */
    step: (delta: number) => void;
    private flushOperations;
    private applyOperation;
    input: typeof input;
}
